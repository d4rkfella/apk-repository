name: Build Binaries

on:
  workflow_dispatch:

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: aarch64
            runner: ubuntu-24.04-arm
      max-parallel: 2
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build jfrog-cli
        run: |
          git clone https://github.com/jfrog/jfrog-cli
          pushd jfrog-cli
          GOAMD64="v2" GOARM64="v8.0" go build -o /usr/local/bin/jf -ldflags -w -trimpath -buildmode default main.go
          popd
          rm -rf jfrog-cli

      - name: Build bubblewrap
        run: |
          sudo apt update
          sudo apt install -y libcap-dev meson ninja-build pkg-config
          git clone https://github.com/containers/bubblewrap
          pushd bubblewrap
          meson setup --prefix=/usr -Drequire_userns=true . output
          cd output
          ninja
          sudo ninja install
          popd
          rm -rf bubblewrap

      - name: Build melange from tip
        shell: bash
        run: |
          set -ex
          
          case ${{ inputs.version }} in
          tip)
            TMP_CLONE_DIR="$(mktemp -d)"
            git clone https://github.com/chainguard-dev/melange "${TMP_CLONE_DIR}"
            pushd "${TMP_CLONE_DIR}"
            make melange
            sudo env "PATH=$PATH" make install
            popd
            rm -rf "${TMP_CLONE_DIR}"
            ;;
          latest-release)
            
            releases=$(curl -s -u "username:${{ github.token }}" https://api.github.com/repos/chainguard-dev/melange/releases?per_page=20)
  
            tag=$(echo $releases | jq -r 'first(.[] | select(.assets | length > 0) | .tag_name)')
            if [[ -z ${tag} ]]; then
              echo "No melange release with assets found"
              exit 1
            fi
            ;;
          *)
            tag="${{ inputs.version }}"
          esac
  
          if [[ ! -z ${tag} ]]; then
            case "$(echo $RUNNER_ARCH | awk '{print tolower($0)}')" in
            x86|x64) ARCH=amd64;;
            arm64)   ARCH=arm64;;
            *)
              echo Unsupported RUNNER_ARCH \"$RUNNER_ARCH\"
              exit -1
              ;;
            esac
            case "$(echo $RUNNER_OS | awk '{print tolower($0)}')" in
            "linux") OS=linux;;
            "macos") OS=osx;;
            *)
              echo Unsupported RUNNER_OS \"$RUNNER_OS\"
              exit -1
              ;;
            esac
  
            without_v=${tag#"v"}
            echo "Installing melange @ ${tag}"
            curl -fsL https://github.com/chainguard-dev/melange/releases/download/${tag}/melange_${without_v}_${OS}_${ARCH}.tar.gz | sudo tar xzf - --strip-components=1 -C /usr/local/bin
          fi
  
          melange version
      
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: prebuilt-binaries-${{ runner.arch }}
          path: |
            /usr/local/bin/jf
            /usr/local/bin/bwrap
            /usr/local/bin//melange
