name: Build GitHub Actions Runner Image (Wolfi)

on:
  workflow_dispatch:
    inputs:
      runner_version:
        description: 'GitHub Actions runner version'
        required: true
        default: '2.324.0'
      container_hooks_version:
        description: 'Runner container hooks version'
        required: true
        default: '0.7.0'
      dotnet_version:
        description: '.NET runtime version'
        required: true
        default: '8'
jobs:
  build-and-push:
    runs-on: ubuntu-24.04

    permissions:
      id-token: write
      packages: write
      contents: read
      security-events: write
      attestations: write

    env:
      IMAGE_NAME: wolfi-actions-runner

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit
  
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
  
      - name: Set up Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
  
      - name: Set up Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22.x

      - name: Install Semver
        run: npm install semver

      - name: Determine Definitive Version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: version
        with:
          script: |
            const semver = require('semver');
            function extractVersionFromTag(tag) {
              const versionRegex = /(\d+\.\d+\.\d+)/;
              const match = tag.match(versionRegex);
              return match ? match[0] : null;
            }
            function sanitizeInputVersion(version) {
              return version.split('-')[0]; // Remove any pre-release suffixes
            }
            const tag = '${{ inputs.runner_version }}';
            const extractedVersion = extractVersionFromTag(tag);
            const validSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
            const date = new Date();
            const parsedVersion = validSemverRegex.exec(extractedVersion);
            const validSemver = parsedVersion !== null;
            const parsedSemver = validSemver ? semver.coerce(parsedVersion[0]) : null;
            const outputVersion = validSemver
              ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}` // Use the extracted version
              : `${date.getFullYear()}.${date.getMonth() + 1}.${date.getDate()}`; // Fallback to date-based version
            const sanitizedInputVersion = validSemver ? sanitizeInputVersion(extractedVersion) : tag;
            core.setOutput('version', outputVersion);
            core.setOutput('validSemver', validSemver);
            core.setOutput('sanitizedInputVersion', sanitizedInputVersion);

      - name: Build Meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        with:
          flavor: latest=false
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=${{ steps.version.outputs.sanitizedInputVersion }},enable=${{ steps.version.outputs.validSemver }}
            type=raw,value=rolling

      - name: Build and push the container
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        id: build-and-push
        with:
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ inputs.runner_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          file: Dockerfile
          provenance: false
          sbom: false
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}

      - name: Attest the build
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

      - name: Scan it
        uses: anchore/scan-action@2c901ab7378897c01b8efaa2d0c9bf519cc64b9e # v6.2.0
        id: scan
        with:
          image: "ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.build-and-push.outputs.digest }}"
          fail-build: false

      - name: Upload the container scan report
        id: upload
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f # v3.28.18
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          wait-for-processing: true

      - name: Generate SBOM
        uses: anchore/sbom-action@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0
        with:
          image: "ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.build-and-push.outputs.digest }}"
          artifact-name: "${{ env.IMAGE_NAME }}-${{ steps.build-and-push.outputs.digest }}.sbom"

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
