name: Build Packages

on:
  push:
    branches: ["main"]
    paths: ["src/packages/**/melange.yaml"]
  workflow_dispatch:
    inputs:
      apps:
        description: "Comma-separated list of app folders (e.g. radarr,sonarr)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  discover-packages:
    runs-on: ubuntu-24.04
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of packages
        id: set-packages
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            apps="${{ github.event.inputs.apps }}"
            if [[ -z "$apps" ]]; then
              echo "No apps provided. Discovering all melange.yaml files..."
              pkgs=$(find src/packages -name 'melange.yaml' | jq -R -s -c 'split("\n") | map(select(length > 0))')
            else
              echo "Apps provided: $apps"
              IFS=',' read -ra APP_ARRAY <<< "$apps"
              files=()
              for app in "${APP_ARRAY[@]}"; do
                file="src/packages/$app/melange.yaml"
                if [[ -f "$file" ]]; then
                  files+=("$file")
                else
                  echo "::warning::File not found: $file"
                fi
              done
              pkgs=$(printf "%s\n" "${files[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            fi
          else
            echo "Push trigger: using changed files..."
            pkgs=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'src/packages/.*/melange.yaml' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
      
          echo "Detected packages: $pkgs"
          echo "packages=$pkgs" >> "$GITHUB_OUTPUT"
  
  setup:
    needs: discover-packages
    if: ${{ needs.discover-packages.outputs.packages != '[]' }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      max-parallel: 2
    uses: ./.github/workflows/setup-build-dependencies.yaml
    with:
      arch: ${{ matrix.arch }}

  build:
    needs: [discover-packages, setup]
    if: ${{ needs.discover-packages.outputs.packages != '[]' }}
    strategy:
      matrix:
        packages: ${{ fromJSON(needs.discover-packages.outputs.packages) }}
        arch: [x86_64, aarch64]
      max-parallel: 4
      fail-fast: false
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    steps:
      - name: Retrieve Cache Key
        id: cache
        run: echo "key=$(date -u +'%G-%V')" >> $GITHUB_OUTPUT

      - name: Restore build dependencies
        uses: actions/cache/restore@v4
        with:
          key: build-dependencies-${{ matrix.arch }}-${{ steps.cache.outputs.key }}
          fail-on-cache-miss: true
          path: |
            /usr/local/bin/jf
            /usr/local/bin/bwrap
            /usr/local/bin/melange
            /usr/local/bin/yq

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Packages
        uses: d4rkfella/actions/melange-build@main
        with:
          archs: ${{ matrix.arch }}
          artifactory-access-token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          artifactory-url: https://packages.darkfellanetwork.com
          artifactory-repository-path: wolfi-apk
          config: ${{ matrix.packages }}
          sign-with-key: true
          signing-key-path: ${{ github.workspace }}/melange.rsa
          namespace: wolfi
          pipeline-dir: ${{ github.workspace }}/pipelines
          repository-append: https://packages.darkfellanetwork.com/wolfi-os,https://packages.wolfi.dev/os
          keyring-append: https://packages.darkfellanetwork.com/wolfi-os/melange.rsa.pub,https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
          tests-repository-append: https://packages.darkfellanetwork.com/wolfi-os,https://packages.wolfi.dev/os
          tests-keyring-append: https://packages.darkfellanetwork.com/wolfi-os/melange.rsa.pub,https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
        env:
          MELANGE_PRIVATE_KEY: ${{ secrets.MELANGE_PRIVATE_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Build Info to Artifactory
        shell: bash
        run: |
          build_name="melange-${{ matrix.packages }}-${{ matrix.arch }}"
          build_number="${{ github.run_id }}"
      
          jf c add artifactory \
            --url="https://packages.darkfellanetwork.com" \
            --access-token="${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" \
            --interactive=false
      
          jf rt build-config --build-name="$build_name" --build-number="$build_number"
      
          # optional but recommended
          jf rt build-collect-env
      
          jf rt build-publish
