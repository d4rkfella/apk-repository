name: Update Melange Packages

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:  # Allows manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      identifiers: ${{ steps.extract-ids.outputs.identifiers }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install yq
        run: |
          echo "Installing yq..."
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Extract identifiers and file paths
        id: extract-ids
        run: |
          echo "Extracting identifiers and file paths..."
      
          identifiers_and_paths=$(find . -name "melange.yaml" -exec bash -c '
            file="{}"
            identifier=$(yq ".update.release-monitor.identifier" "$file")
            if [[ "$identifier" != "null" && -n "$identifier" ]]; then
              echo "$file,$identifier"
            fi
          ' \;)      
          identifiers_array=()      
          while IFS=, read -r path identifier; do
            identifiers_array+=("{\"path\":\"$path\",\"identifier\":\"$identifier\"}")
          done <<< "$identifiers_and_paths" 
          identifiers="[$(printf "%s," "${identifiers_array[@]}" | sed 's/,$//')]"
          echo "identifiers=$identifiers" >> $GITHUB_OUTPUT

  release-monitoring:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: check-updates
    strategy:
      matrix:
        identifier: ${{ fromJson(needs.check-updates.outputs.identifiers) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup melange
        uses: chainguard-dev/actions/setup-melange@58b5d1b6769b7e88dfa5c85bbc81a5a02eaca5bc # main

      - name: Install yq
        run: |
          echo "Installing yq..."
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Run release-monitoring for each identifier
        id: release-monitoring
        uses: chainguard-images/actions/release-monitoring@0c41b080c7a4d6f7caf510a1c6f67d593f687789 # main
        with:
          project-id: ${{ matrix.identifier.identifier }}
          api-token: ${{ secrets.RELEASE_MONITORING_TOKEN }}

      - name: Bump the version if a newer release is available
        id: check-bump
        run: |
          latest_version="${{ steps.release-monitoring.outputs.latest-version }}"
          current_version=$(yq ".package.version" "${{ matrix.identifier.path }}")
          echo "Current version: $current_version"
          echo "Latest version: $latest_version"
          
          if [[ $(echo -e "$latest_version\n$current_version" | sort -V | head -n 1) != "$current_version" ]]; then
            echo "New version available: $latest_version. Proceeding with version bump."
            melange bump "${{ matrix.identifier.path }}" $latest_version
            echo "bumped=true" >> $GITHUB_ENV
          else
            echo "No new version available. Skipping version bump."
            echo "bumped=false" >> $GITHUB_ENV
          fi
          cat "${{ matrix.identifier.path }}"

      - name: Create a PR
        if: env.bumped == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          package_name=$(yq ".package.name" "${{ matrix.identifier.path }}")
          branch_name="update-$package_name"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git fetch --all         
          
          if git diff --quiet origin/$branch_name -- "${{ matrix.identifier.path }}"; then
              echo "No changes detected in ${{ matrix.identifier.path }}. Skipping commit and push."
            else
              echo "Changes detected in ${{ matrix.identifier.path }}. Proceeding with commit and force push."
              git add "${{ matrix.identifier.path }}"
              git commit -m "Bump $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}"
              
              git reset --soft $(git merge-base origin/$branch_name HEAD)
              git commit --amend -m "Bump $package_name version to ${{ steps.release-monitoring.outputs.latest-version }} (squashed)"
              
              git push --force origin $branch_name
            fi
          else
            echo "Creating new branch $branch_name"
            git checkout -b $branch_name
            git add "${{ matrix.identifier.path }}"
            git commit -m "Bump $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}"
            git push origin $branch_name
          fi
      
          pr_exists=$(gh pr list --base main --head "$branch_name" --json number --jq 'length')
      
          if [ "$pr_exists" -eq 0 ]; then
            echo "Creating new PR..."
            gh pr create \
              --base main \
              --head "$branch_name" \
              --title "Update $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}" \
              --body "This Automated PR updates the version of $package_name to ${{ steps.release-monitoring.outputs.latest-version }}" \
              --label version-bump \
              --assignee ${{ github.actor }} \
              --reviewer ${{ github.actor }}
          else
            echo "PR already exists."
          fi
