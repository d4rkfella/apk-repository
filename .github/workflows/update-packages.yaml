name: Update Melange Packages

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:  # Allows manual trigger

jobs:
  construct-array:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      package_info: ${{ steps.extract-info.outputs.package_info }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install yq
        run: |
          echo "Installing yq..."
          sudo apt-get update
          sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Construct package info json array
        id: extract-info
        run: |
          declare -a package_info_array=()
      
          while IFS= read -r -d '' file; do
            if ! yq -e '.update' "$file" >/dev/null 2>&1; then
                echo "Skipping $file - no update section"
                continue
            fi
            
            enabled=$(yq '.update.enabled' "$file")
            if [[ "$enabled" == "false" ]]; then
                echo "Skipping $file - updates disabled"
                continue
            fi
            
            package_name=$(yq ".package.name" "$file")
            version=$(yq ".package.version" "$file")
            identifier=$(yq '.update.release-monitor.identifier' "$file")
            changelog_url=$(yq '.environment.CHANGELOG_URL // ""' "$file")
            [[ "$changelog_url" == "null" ]] && changelog_url=""
          
            json_base=$(jq -n \
              --arg package_name "$package_name" \
              --arg path "$file" \
              --arg identifier "$identifier" \
              --arg version "$version" \
              '{
                package_name: $package_name,
                path: $path,
                identifier: $identifier,
                version: $version
              }')
          
            if [[ -n "$changelog_url" ]]; then
              json_base=$(jq --arg changelog_url "$changelog_url" \
                '. + {changelog_url: $changelog_url}' <<< "$json_base")
            fi
          
            if yq -e ".update.version-transform" "$file" >/dev/null 2>&1; then
              match=$(yq ".update.version-transform[0].match" "$file")
              replace=$(yq ".update.version-transform[0].replace" "$file")
              json_base=$(jq -n --argjson base "$json_base" \
                --arg match "$match" --arg replace "$replace" \
                '$base + {version_transform: {match: $match, replace: $replace}}')
            fi
          
            package_info_array+=("$json_base")
          done < <(find . -name "melange.yaml" -print0)
          
          json_output=$(printf "%s\n" "${package_info_array[@]}" | jq -cs '.')
          echo $json_output
          echo "package_info=$json_output" >> "$GITHUB_OUTPUT"


  release-monitoring:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: construct-array
    strategy:
      matrix:
        package_info: ${{ fromJson(needs.construct-array.outputs.package_info) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Install Melange
        run: |
          brew install melange

      - name: Check for latest version
        id: release-monitoring
        uses: chainguard-images/actions/release-monitoring@0c41b080c7a4d6f7caf510a1c6f67d593f687789 # main
        with:
          project-id: ${{ matrix.package_info.identifier }}
          api-token: ${{ secrets.RELEASE_MONITORING_TOKEN }}

      - name: Compare current version with latest version
        id: check-bump
        run: |
          function apply_version_transform() {
            local latest_version="${{ steps.release-monitoring.outputs.latest-version }}"
            local transform_info="${{ matrix.package_info.version_transform }}"
          
            if [[ "$transform_info" != "" ]]; then
              echo "Processing version transform..." >&2
              match='${{ matrix.package_info.version_transform.match }}'
              replace='${{ matrix.package_info.version_transform.replace }}'
              latest_version=$(echo "$latest_version" | perl -pe "s/$match/$replace/")
              echo "$latest_version"
            else
              echo "No version transform regex to apply..." >&2
              echo "$latest_version"
            fi
          }
          
          function compare_and_bump() {
            local latest_version="$1"
            local current_version="$2"
            local package_path="$3"
          
            function version_gt() {
              [ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]
            }
          
            if version_gt "$latest_version" "$current_version"; then
              echo "New version available: $latest_version > $current_version. Proceeding with version bump."
              melange bump "$package_path" "$latest_version"
              echo "bumped=true" >> $GITHUB_ENV
            else
              echo "No new version available. $current_version = $latest_version."
              echo "bumped=false" >> $GITHUB_ENV
            fi
          }

          current_version="${{ matrix.package_info.version }}"
          latest_version=$(apply_version_transform)
          
          echo "Current version: $current_version"
          echo "Latest version: $latest_version"
          
          compare_and_bump "$latest_version" "$current_version" "${{ matrix.package_info.path }}"
      
      - name: Create a PR
        if: env.bumped == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          package_name=${{ matrix.package_info.package_name }}
          branch_name="update-$package_name"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git fetch --all         
          
          if git rev-parse --verify origin/$branch_name >/dev/null 2>&1; then
            echo "Branch $branch_name already exists, force pushing changes."
            git stash
            
            git checkout $branch_name

            git checkout stash -- "${{ matrix.package_info.path }}"
            
            if git diff --quiet origin/$branch_name -- "${{ matrix.package_info.path }}"; then
              echo "No changes detected in ${{ matrix.package_info.path }}. Skipping commit and push."
            else
              echo "Changes detected in ${{ matrix.package_info.path }}. Proceeding with commit and force push."
              git add "${{ matrix.package_info.path }}"
              git commit -m "Bump $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}"
              git push origin $branch_name
            fi
          else
            echo "Creating new branch $branch_name"
            git checkout -b $branch_name
            git add "${{ matrix.package_info.path }}"
            git commit -m "Bump $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}"
            git push origin $branch_name
          fi
      
          pr_exists=$(gh pr list --base main --head "$branch_name" --json number --jq 'length')
      
          if [ "$pr_exists" -eq 0 ]; then
            echo "Creating new PR..."
            gh pr create \
              --base main \
              --head "$branch_name" \
              --title "Update $package_name version to ${{ steps.release-monitoring.outputs.latest-version }}" \
              --body "This Automated PR updates the version of $package_name to ${{ steps.release-monitoring.outputs.latest-version }}" \
              --label version-bump \
              --assignee ${{ github.actor }} \
              --reviewer ${{ github.actor }}
          else
            echo "PR already exists."
          fi
