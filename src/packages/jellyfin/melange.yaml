package:
  name: jellyfin-custom
  version: "10.11.0"
  epoch: 0
  description: The Free Software Media System
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - fontconfig
      - ttf-dejavu
      - sqlite-libs
      - aspnet-9-runtime

environment:
  environment:
    REPRODUCIBLE: false
  contents:
    packages:
      - dotnet-9-sdk
      - aspnet-9-runtime
      - busybox
      - curl
      - bash
      - unzip
      - woff2

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/jellyfin/jellyfin
      tag: v${{package.version}}-rc1
      expected-commit: "c2cc27a8a9dc1555b6ccc5d24671ef3792a05589"
  
  - uses: patch
    with:
      patches: GHSA-qrmm-w75w-3wpx.patch
  
  - runs: |
      if [[ "${{build.arch}}" == "aarch64" ]]; then
        runtime_arch="arm64"
      elif [[ "${{build.arch}}" == "x86_64" ]]; then
        runtime_arch="x64"
      fi
      
      dotnet publish \
        --configuration Release Jellyfin.Server \
        --output publish \
        --runtime linux-$runtime_arch \
        --self-contained false \
        -p:DebugSymbols=false \
        -p:DebugType=none

      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/jellyfin-ffmpeg "${{targets.destdir}}"/usr/lib/jellyfin-fallback-fonts
      cp -dr publish "${{targets.destdir}}"/usr/lib/jellyfin

      ln -s /usr/lib/jellyfin/jellyfin "${{targets.destdir}}"/usr/bin/jellyfin

      ./fallback-fonts.sh

  - runs: |
      if [[ "${{build.arch}}" == "aarch64" ]]; then
        runtime_arch="arm64"
      elif [[ "${{build.arch}}" == "x86_64" ]]; then
        runtime_arch="64"
      fi

      curl -L https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v7.1.1-5/jellyfin-ffmpeg_7.1.1-5_portable_linux${runtime_arch}-gpl.tar.xz | tar -xJ -C "${{targets.destdir}}"/usr/lib/jellyfin-ffmpeg
      ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg "${{targets.destdir}}"/usr/bin/ffmpeg
      ln -s /usr/lib/jellyfin-ffmpeg/ffprobe "${{targets.destdir}}"/usr/bin/ffprobe
  
  - uses: strip
  
test:
  environment:
    contents:
      packages:
        - lttng-ust
  
  pipeline:
    - name: "Start Jellyfin server"
      runs: |
        jellyfin --nowebclient > /tmp/jellyfin.log 2>&1 &
        JELLYFIN_PID=$!

        sleep 10

        if ! ps | grep -q "$JELLYFIN_PID"; then
          echo "Test failed: Jellyfin failed to start."
          echo "----- Jellyfin Debug Logs -----"
          cat /tmp/jellyfin.log
          exit 1
        else
          echo "Test passed: Jellyfin started successfully."
        fi
    
    - name: "Verify Jellyfin HTTP service on port 8096"
      runs: |
        echo "Checking Jellyfin service status..."
        max_retries=10
        retry_interval=5
        i=1
    
        while [ "$i" -le "$max_retries" ]; do
          if pgrep -f "jellyfin.dll" >/dev/null && \
             (netstat -tuln | awk '$4 ~ /:8096$/ {exit 0}'); then
            echo "Jellyfin is running and listening on port 8096"
            exit 0
          fi
          
          echo "Attempt $i/$max_retries: Service not ready. Waiting $retry_interval seconds..."
          sleep "$retry_interval"
          i=$((i + 1))
        done
    
        echo "----- Process List -----"
        ps aux
        echo "----- Network Status -----"
        netstat -tuln
        echo "----- Jellyfin Logs -----"
        cat /tmp/jellyfin.log
    
        echo "Test failed: Jellyfin service verification timed out."
        exit 1
    
    - runs: ln -s /usr/lib/liblttng-ust.so.1 /usr/lib/liblttng-ust.so.0
    
    - uses: test/tw/ldd-check

update:
  enabled: true
  ignore-regex-patterns:
    - '.*alpha.*'
    - '.*beta.*'
    - '.*rc.*'
  github:
    identifier: jellyfin/jellyfin
    strip-prefix: v
