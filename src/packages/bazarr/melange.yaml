package:
  name: bazarr
  version: "1.5.2_beta36"
  epoch: 0
  description: Bazarr is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you.
  copyright:
    - license: GPL-3.0-only
  dependencies:
    runtime:
      - unrar
environment:
  contents:
    keyring:
      - https://packages.darkfellanetwork.com/melange.rsa.pub
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    repositories:
      - https://packages.darkfellanetwork.com
      - https://packages.wolfi.dev/os
    packages:
      - build-base
      - python-3.13
      - python-3.13-dev
      - py3.13-pip
      - libxml2-dev
      - libxslt-dev
      - busybox
      - bash
      - ca-certificates-bundle
      - curl
var-transforms:
  - from: ${{package.version}}
    match: "_beta(\\d+)$"
    replace: "-beta.$1"
    to: transformed-version
pipeline:
  - uses: git-checkout
    with:
      expected-commit: "4642db334a8b94a865cbf811ab90fc5316c74db0"
      repository: https://github.com/morpheus65535/bazarr
      tag: v${{vars.transformed-version}}
  - name: Install volta
    runs: |
      curl -sSL https://get.volta.sh | bash 
  - name: Build frontend
    working-directory: /home/build/frontend
    runs: |
      PATH="$PATH:$HOME/.volta/bin"
      volta install node@$(cat .nvmrc)
      npx update-browserslist-db@latest
      npm install
      npm run build
  - name: Download ffmpeg-static binaries
    runs: |
      mkdir -p ${{targets.destdir}}/usr/bin
      curl -fsSL "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz" | \
      tar xJ --strip-components=2 --exclude='**/LICENSE.txt' --exclude='**/doc' --exclude='**/man' --exclude='**/bin/ffplay' --directory=${{targets.destdir}}/usr/bin
  - runs: |
     #!/bin/bash
      set -euo pipefail
      
      # Define paths
      DEST_DIR="/tmp"
      LIBS_DIR="libs"
      
      pip download --no-deps --dest="$DEST_DIR" waitress==3.0.1
      pip download --no-deps --dest="$DEST_DIR" jinja2==3.1.6
      
      if [ -d "$LIBS_DIR/waitress-3.0.0.dist-info" ]; then
          rm -rf "$LIBS_DIR/waitress-3.0.0.dist-info"
      else
          echo "Warning: $LIBS_DIR/waitress-3.0.0.dist-info not found, skipping"
      fi
      
      if [ -d "$LIBS_DIR/jinja2-3.1.5.dist-info" ]; then
          rm -rf "$LIBS_DIR/jinja2-3.1.5.dist-info"
      else
          echo "Warning: $LIBS_DIR/jinja2-3.1.5.dist-info not found, skipping"
      fi
      
      if [ ! -f "$DEST_DIR/waitress-3.0.1-py3-none-any.whl" ]; then
          echo "Error: Wheel file for waitress not found!"
          exit 1
      fi
      
      if [ ! -f "$DEST_DIR/jinja2-3.1.6-py3-none-any.whl" ]; then
          echo "Error: Wheel file for jinja2 not found!"
          exit 1
      fi
      
      python3 -m zipfile -e "$DEST_DIR/waitress-3.0.1-py3-none-any.whl" "$LIBS_DIR/"
      python3 -m zipfile -e "$DEST_DIR/jinja2-3.1.6-py3-none-any.whl" "$LIBS_DIR/"
      
      echo "âœ… All tasks completed successfully!"
  - name: Enable SSL verification
    runs: |
      set -euo pipefail
      
      if ! head -n 15 "libs/urllib3/connectionpool.py" | grep -q "import ssl"; then
        sed -i '/from __future__ import annotations/a import ssl' "libs/urllib3/connectionpool.py"
        echo "'import ssl' has been added to the top of the file."
      else
        echo "'import ssl' is already present in the file."
      fi
      
      sed -i 's/cert_reqs=self\.cert_reqs/cert_reqs=ssl.CERT_REQUIRED/' "libs/urllib3/connectionpool.py"  
  - name: Prepare package
    runs: |
      set -euo pipefail
      
      export LANG=C.UTF-8
      export PYTHONDONTWRITEBYTECODE=1
      export PYTHONUNBUFFERED=1
      PATH="/usr/lib/Bazarr/bin/venv/bin:$PATH"
      to_dist=${{targets.destdir}}/usr/lib/Bazarr/bin
      file_list=$(cat .github/files_to_copy)
      
      mkdir -p $to_dist
      mkdir -p /usr/lib/Bazarr/bin
      
      python -m venv --copies /usr/lib/Bazarr/bin/venv
      pip install --upgrade setuptools wheel pip --no-cache-dir \
      -r requirements.txt \
      -r postgres-requirements.txt
      
      git describe --abbrev=0 > VERSION
      
      for f in $file_list
      do
          echo "**** copying $f to release ****"
          cp -r --parents "$f" $to_dist
      done
      
      find /usr/lib/Bazarr/bin/venv -name "*.pc" -delete
      
      cp VERSION $to_dist
      cp -r /usr/lib/Bazarr/bin/venv $to_dist
      
      printf "UpdateMethod=docker\nBranch=master\nPackageVersion=${{package.version}}\nPackageAuthor=[d4rkfella](https://github.com/d4rkfella)" > ${{targets.destdir}}/usr/lib/Bazarr/package_info
test:
  environment:
    contents:
      packages:
        - curl
        - bash
        - jq
        - yq
  pipeline:
    - name: Check for missing dependancies
      uses: test/tw/ldd-check
      with:
        packages: ${{package.name}}
    - name: Run test script
      runs: |
        EXPECTED_VERSION="${{vars.transformed-version}}" test/test.sh
