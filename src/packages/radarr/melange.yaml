package:
  name: radarr
  version: "5.21.1.9799"
  epoch: 0
  description: Movie download automation for usenet and torrents.
  copyright:
    - license: GPL-3.0-only
environment:
  contents:
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    repositories:
      - https://packages.wolfi.dev/os
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - dotnet-6-sdk
      - yarn
      - sqlite-libs
      - nodejs-20
pipeline:
  - uses: git-checkout
    with:
      expected-commit: ""
      repository: https://github.com/Radarr/Radarr
      tag: v${{package.version}}
  - runs: |
      export BROWSERSLIST_IGNORE_OLD_DATA=true
      yarn install --frozen-lockfile --network-timeout 120000
  
  - runs: |
      _slnFile=src/Radarr.sln
      _platform=Posix
      _dotnet_arch="x64"
      _runtime="linux-$_dotnet_arch"
      _framework="net6.0"
      _output="_output"
      _artifacts="$_output/$_framework/$_runtime/publish"
      ulimit -n 4096
      echo "Updating Version Info"
      sed -i'' -e "s/<AssemblyVersion>[0-9.*]\+<\/AssemblyVersion>/<AssemblyVersion>${{package.version}}<\/AssemblyVersion>/g" src/Directory.Build.props
      sed -i'' -e "s/<AssemblyConfiguration>[\$()A-Za-z-]\+<\/AssemblyConfiguration>/<AssemblyConfiguration>master<\/AssemblyConfiguration>/g" src/Directory.Build.props
      dotnet clean $_slnFile -c Debug
      dotnet clean $_slnFile -c Release
      dotnet msbuild -restore $_slnFile -p:Configuration=Release -p:Platform=$_platform -p:RuntimeIdentifiers=$_runtime -t:PublishAllRids
      chmod +x "$_artifacts"/ffprobe
  - runs: |
      export BROWSERSLIST_IGNORE_OLD_DATA=true
      yarn install --frozen-lockfile --network-timeout 120000
      yarn lint
      yarn stylelint-linux
      yarn run build --env production
  - name: Prepare package
    runs: |
      _dotnet_arch="x64"
      _runtime="linux-$_dotnet_arch"
      _framework="net6.0"
      _output="_output"
      _artifacts="$_output/$_framework/$_runtime/publish"
      _destdir="${{targets.destdir}}/usr/lib/Radarr"
      mkdir -p ${{targets.destdir}}/usr/lib/Radarr
      
      cp -r $_artifacts/* $_destdir
      cp -r $_output/UI $_destdir

      rm -f $_destdir/ServiceUninstall.*
      rm -f $_destdir/ServiceInstall.*
  
      echo "Removing Radarr.Windows"
      rm $_destdir/Radarr.Windows.*
  
      echo "Adding LICENSE"
      cp LICENSE $_destdir
