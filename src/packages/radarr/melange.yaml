package:
  name: radarr
  version: "6.0.1.10258"
  epoch: 0
  description: Movie download automation for usenet and torrents.
  copyright:
    - license: GPL-3.0-only
  dependencies:
    runtime:
      - aspnet-8-runtime
      - sqlite-libs
environment:
  contents:
    packages:
      - wolfi-baselayout
      - busybox
      - dotnet-8-sdk
      - nodejs
      - yarn
      - jq
pipeline:
  - uses: git-checkout
    with:
      expected-commit: 64b2a10b3f538668c9a41493eb5bc52d2cb814af
      repository: https://github.com/Radarr/Radarr
      tag: v${{package.version}}
  - name: Build
    runs: |
      if [[ "${{build.arch}}" == "aarch64" ]]; then
        runtime_arch="arm64"
      elif [[ "${{build.arch}}" == "x86_64" ]]; then
        runtime_arch="x64"
      fi

      export BROWSERSLIST_IGNORE_OLD_DATA=true

      yarn install --frozen-lockfile --network-timeout 120000

      jq '.sdk.version = "8.0.120"' /home/build/global.json > /home/build/global.json.tmp && mv /home/build/global.json.tmp /home/build/global.json

      _dotnet_arch="$runtime_arch"
      _runtime="linux-$_dotnet_arch"
      _framework="net8.0"
      _output="_output"
      _destdir="${{targets.destdir}}/usr/lib/radarr"
      _artifacts="$_output/$_framework/$_runtime/publish"

      ulimit -n 4096

      dotnet publish src \
        -p:AssemblyConfiguration="master" \
        -p:AssemblyVersion="${{package.version}}" \
        -p:RuntimeIdentifier="$_runtime" \
        -p:Configuration=Release \
        -p:DebugSymbols=false \
        -p:DebugType=none \
        -p:SelfContained=false \
        -p:SentryCliExecutable= \
        -p:SentryUploadSymbols=false \
        -p:SentryIncludeSources=false \
        -p:EmbedAllSources=false \
        -f "$_framework"

      yarn run build --env production

      chmod +x "$_artifacts/ffprobe"

      find "$_artifacts" \( \
        -name "ServiceUninstall.*" -o \
        -name "ServiceInstall.*" -o \
        -name "Radarr.Windows.*" \
      \) -delete

      mv "$_output/UI" "$_artifacts"

      echo "Preparing package"

      mkdir -p "$_destdir" "${{targets.destdir}}/usr/bin"

      printf "UpdateMethod=docker\nBranch=%s\nPackageVersion=%s\nPackageAuthor=[d4rkfella](https://github.com/d4rkfella)\n" "develop" "${{package.version}}" > "$_destdir/package_info"

      cp -af "$_artifacts" "$_destdir/bin"

      ln -s /usr/lib/radarr/bin/Radarr "${{targets.destdir}}/usr/bin/Radarr"
  - uses: strip
test:
  environment:
    contents:
      packages:
        - curl
        - bash
        - jq
        - xmlstarlet
        - lttng-ust
  pipeline:
    - runs: ln -s /usr/lib/liblttng-ust.so.1 /usr/lib/liblttng-ust.so.0
    - name: Check for missing dependancies
      uses: test/tw/ldd-check
      with:
        packages: ${{package.name}}
    - name: Run test script
      runs: |
        EXPECTED_VERSION="${{package.version}}" ./test.sh
update:
  enabled: true
  github:
    identifier: Radarr/Radarr
    strip-prefix: v
